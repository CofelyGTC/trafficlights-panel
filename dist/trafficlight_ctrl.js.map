{"version":3,"sources":["../src/trafficlight_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","TimeSeries","stringToJsRegex","panelDefaults","bgColor","trafficLightSettings","lightsPerLine","width","invertScale","showValue","showTrend","redThreshold","greenThreshold","noValueNumber","max","fontSize","fontColor","units","digits","spreadControls","sortLights","renderLink","linkUrl","linkTooltip","linkTargetBlank","TrafficLightCtrl","$scope","$injector","templateSrv","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","onRender","onDataReceived","onDataError","percentPerLight","data","updateTraffics","series","applyRegex","seriesList","length","i","regexPattern","undefined","regexVal","id","test","toString","temp","exec","extractedtxt","slice","forEach","value","name","label","dataList","newseries","map","seriesHandler","newserie","datapoints","trend","trendClass","push","e","rows","sortBy","o","replace","orderBy","seriesData","alias","target","addEditorTab","$timeout","cancel","nextTickPromise","link","scopedVars","format","scoped","key","trafficsperline","lines","metrics","scope","elem","attrs","ctrl","$panelContainer","find","css","setTimeout","renderingCompleted","templateUrl"],"mappings":"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","file":"trafficlight_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\nimport TimeSeries from 'app/core/time_series';\r\n\r\nimport './css/trafficlight-panel.css!';\r\nimport { stringToJsRegex } from '@grafana/data';\r\n\r\nconst panelDefaults = {\r\n  bgColor: null\r\n  ,trafficLightSettings:\r\n  {\r\n    lightsPerLine:5,\r\n    width:20,\r\n    invertScale:false,\r\n    showValue:true,\r\n    showTrend:true,\r\n    redThreshold:20,\r\n    greenThreshold:80,\r\n    noValueNumber:null,\r\n    max:100,\r\n    fontSize:'12px',\r\n    fontColor: 'black',\r\n    units:'',\r\n    digits:1,\r\n    spreadControls:false,\r\n    sortLights:false,\r\n    renderLink:false,\r\n    linkUrl: \"\",\r\n    linkTooltip: \"\",\r\n    linkTargetBlank:false\r\n  }\r\n};\r\n\r\n\r\n\r\nexport class TrafficLightCtrl extends MetricsPanelCtrl {\r\n  constructor($scope, $injector, templateSrv) {\r\n    super($scope, $injector);\r\n    _.defaultsDeep(this.panel, panelDefaults);\r\n\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\r\n    this.events.on('panel-initialized', this.render.bind(this));\r\n\r\n    this.events.on('render', this.onRender.bind(this));\r\n    this.events.on('data-received', this.onDataReceived.bind(this));\r\n    this.events.on('data-error', this.onDataError.bind(this));\r\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n\r\n    this.percentPerLight=100;\r\n\r\n    this.data=[]\r\n    this.templateSrv = templateSrv\r\n    this.updateTraffics();\r\n  }\r\n\r\n\r\n\r\n  onDataError() {\r\n    this.series = [];\r\n    this.render();\r\n  }\r\n\r\n  onRender() {\r\n    //this.data = this.parseSeries(this.series);\r\n    this.applyRegex();\r\n  }\r\n  applyRegex(){\r\n    let seriesList = this.series;\r\n    if (seriesList && seriesList.length > 0) {\r\n      for (let i = 0; i < seriesList.length; i++) {\r\n        if (this.panel.trafficLightSettings.regexPattern !== '' && this.panel.trafficLightSettings.regexPattern !== undefined) {\r\n          const regexVal = stringToJsRegex(this.panel.trafficLightSettings.regexPattern);\r\n          if (seriesList[i].id && regexVal.test(seriesList[i].id.toString())) {\r\n            const temp = regexVal.exec(seriesList[i].id.toString());\r\n            if (!temp) {\r\n              continue;\r\n            }\r\n            let extractedtxt = '';\r\n            if (temp.length > 1) {\r\n              temp.slice(1).forEach((value, i) => {\r\n                if (value) {\r\n                  extractedtxt += extractedtxt.length > 0 ? ' ' + value.toString() : value.toString();\r\n                }\r\n              });\r\n              this.data[i].name = extractedtxt;\r\n            }\r\n          }\r\n          else {\r\n            this.data[i].name = seriesList[i].id;\r\n            seriesList[i].label = seriesList[i].id;\r\n  \r\n          }\r\n        }\r\n        else {\r\n          this.data[i].name = seriesList[i].id;\r\n          seriesList[i].label = seriesList[i].id;\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  onDataReceived(dataList) {\r\n    var newseries=[]\r\n\r\n    try\r\n    {\r\n      this.series = dataList.map(this.seriesHandler.bind(this));\r\n\r\n\r\n\r\n      for(var i =0;i<this.series.length;i++)\r\n      {\r\n        var newserie={\r\n          \"name\":this.series[i].label,\r\n          \"value\":this.series[i].datapoints.slice(-1)[0][0]\r\n        }\r\n\r\n        if(this.series[i].datapoints.length>1)\r\n        {\r\n          newserie.trend=newserie.value-this.series[i].datapoints.slice(-2)[0][0]\r\n\r\n          if(newserie.trend>0)\r\n            if(this.panel.trafficLightSettings.invertScale)\r\n              newserie.trendClass='traffic-light-trend-bad'\r\n            else\r\n              newserie.trendClass='traffic-light-trend-good'\r\n          else if(newserie.trend<0)\r\n            if(this.panel.trafficLightSettings.invertScale)\r\n              newserie.trendClass='traffic-light-trend-good'\r\n            else\r\n              newserie.trendClass='traffic-light-trend-bad'\r\n          else\r\n            newserie.trendClass='traffic-light-trend-neutral'\r\n        }\r\n        newseries.push(newserie);\r\n      }\r\n\r\n    }\r\n    catch(e)\r\n    {\r\n      // This is not a time serie\r\n      this.series=[];\r\n      for(var i=0;i<dataList[0].rows.length;i++)\r\n      {\r\n        var newserie={\r\n          \"name\":dataList[0].rows[i][0],\r\n          \"value\":dataList[0].rows[i][1]\r\n        }\r\n        newseries.push(newserie);\r\n      }\r\n    }\r\n\r\n  //    console.log(newseries)\r\n\r\n    if(this.panel.trafficLightSettings.sortLights)\r\n    {\r\n      this.data=_.sortBy(newseries, [function(o) { return o.name.replace(\":\",\"\").replace(\" \",\"\").replace(\"}\",\"\").replace(\"{\",\"\") }]);\r\n    }\r\n    else\r\n    {\r\n      if(this.panel.trafficLightSettings.invertScale)\r\n        this.data=_.orderBy(newseries, 'value','desc');\r\n      else\r\n        this.data=_.orderBy(newseries, 'value','asc');\r\n    }   \r\n    this.applyRegex(); \r\n  }\r\n\r\n  seriesHandler(seriesData) {\r\n    var series = new TimeSeries({\r\n      datapoints: seriesData.datapoints,\r\n      alias: seriesData.target\r\n    });\r\n    return series;\r\n  }\r\n\r\n  onInitEditMode() {\r\n\r\n    this.addEditorTab('Options', 'public/plugins/snuids-trafficlights-panel/editor.html', 2);\r\n  }\r\n\r\n  onPanelTeardown() {\r\n    this.$timeout.cancel(this.nextTickPromise);\r\n  }\r\n\r\n  renderLink(link, scopedVars, format){\r\n    var scoped = {}\r\n    for (var key in scopedVars) {\r\n        scoped[key] = { value: scopedVars[key] }\r\n    }\r\n    if (format) {\r\n        return this.templateSrv.replace(link, scoped, format)\r\n    } else {\r\n        return this.templateSrv.replace(link, scoped)\r\n    }\r\n  }\r\n\r\n  updateTraffics() {\r\n\r\n    var trafficsperline=this.panel.trafficLightSettings.lightsPerLine;\r\n\r\n    if(this.panel.trafficLightSettings.spreadControls)\r\n    {\r\n      trafficsperline=this.data.length;\r\n      if(this.data.length==0)\r\n        trafficsperline=1;\r\n      this.percentPerLight=100/trafficsperline;\r\n    }\r\n    else\r\n      this.percentPerLight=100/trafficsperline;\r\n\r\n    this.lines=[];\r\n    var metrics=[];\r\n    for(var i=0;i<this.data.length;i++)\r\n    {\r\n      if((i%trafficsperline)==0)\r\n\t\t\t{\r\n\t\t\t\tmetrics=[];\r\n\t\t\t\tthis.lines.push(metrics);\r\n      }\r\n      metrics.push(this.data[i]);\r\n    }\r\n    this.nextTickPromise = this.$timeout(this.updateTraffics.bind(this), 1000);\r\n  }\r\n\r\n  link(scope, elem, attrs, ctrl) {\r\n    this.events.on('render', () => {\r\n      const $panelContainer = elem.find('.panel-container');\r\n\r\n      if (this.panel.bgColor) {\r\n        $panelContainer.css('background-color', this.panel.bgColor);\r\n      } else {\r\n        $panelContainer.css('background-color', '');\r\n      }\r\n      setTimeout(() => ctrl.renderingCompleted(), 1250);\r\n    });\r\n  }\r\n}\r\n\r\nTrafficLightCtrl.templateUrl = 'module.html';\r\n"]}